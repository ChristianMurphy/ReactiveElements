!function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){e.exports=r(2)},function(e,t){e.exports=react},function(e,t,r){!function(){function e(e,t){t.forceUpdate=e.forceUpdate.bind(e)}function n(e,t){i.extend(t,e)}var o=document.registerElement||document.register;if(!o)throw new Error("No custom element support or polyfill found!");o=o.bind(document);var a=window.React||r(1),c=window.ReactDOM||r(4),i=r(3);t.registerReact=function(t,r){function p(e,t){var n=a.createElement(r,t);return e.reactiveElement=n,c.render(n,e,t.onRender)}var u,s=Object.create(HTMLElement.prototype);s.createdCallback=function(){var t=i.getProps(this);t.children=i.getChildren(this),u=p(this,t),n(u,u.props.container),e(u,u.props.container),i.getterSetter(this,"props",function(){return u.props},function(e){u=p(this,e)})},s.detachedCallback=function(){c.unmountComponentAtNode(this)},s.attributeChangedCallback=function(e,t,r){var n=i.attributeNameToPropertyName(e),o=i.parseAttributeValue(r),a=i.shallowCopy({},this.props);a[n]=o,u=p(this,a)},o(t,{prototype:s})},t.utils=i,document.registerReact=t.registerReact}()},function(module,exports,__webpack_require__){var React=window.React||__webpack_require__(1),getAllProperties=function(e){for(var t={};e&&e!==React.Component.prototype&&e!==Object.prototype;){for(var r=Object.getOwnPropertyNames(e),n=0;n<r.length;n++)t[r[n]]=null;e=Object.getPrototypeOf(e)}return delete t.constructor,Object.keys(t)};exports.extend=function(e,t){for(var r=getAllProperties(t),n=0;n<r.length;n++){var o=r[n];if(!(o in e)){var a=t[o];e[o]=a}}},exports.getProps=function(e){for(var t={},r=0;r<e.attributes.length;r++){var n=e.attributes[r],o=exports.attributeNameToPropertyName(n.name);t[o]=exports.parseAttributeValue(n.value)}return t.container=e,t},exports.getterSetter=function(e,t,r,n){Object.defineProperty?Object.defineProperty(e,t,{get:r,set:n}):document.__defineGetter__&&(e.__defineGetter__(t,r),e.__defineSetter__(t,n)),e["get"+t]=r,e["set"+t]=n},exports.attributeNameToPropertyName=function(e){return e.replace(/^(x|data)[-_:]/i,"").replace(/[-_:](.)/g,function(e,t){return t.toUpperCase()})},exports.parseAttributeValue=function(value){if(!value)return null;value=value.replace(/[\n\r]/g,"");var pointerRegexp=/^{.*?}$/i,jsonRegexp=/^{{2}.*}{2}$/,jsonArrayRegexp=/^{\[.*\]}$/,pointerMatches=value.match(pointerRegexp),jsonMatches=value.match(jsonRegexp)||value.match(jsonArrayRegexp);return jsonMatches?value=JSON.parse(jsonMatches[0].replace(/^{|}$/g,"")):pointerMatches&&(value=eval(pointerMatches[0].replace(/[{}]/g,""))),value},exports.getChildren=function(e){for(var t=document.createDocumentFragment();e.childNodes.length;)t.appendChild(e.childNodes[0]);return t},exports.shallowCopy=function(e,t){for(var r in t)e[r]=t[r];return e}},function(e,t){e.exports=react-dom}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,